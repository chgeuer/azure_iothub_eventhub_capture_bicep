{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.3.255.40792",
      "templateHash": "11016562939897526626"
    }
  },
  "parameters": {
    "prefix": {
      "type": "string",
      "maxLength": 8,
      "minLength": 3
    }
  },
  "functions": [],
  "variables": {
    "location": "[resourceGroup().location]",
    "names": {
      "prefix": "[parameters('prefix')]",
      "iothub": {
        "routingEndpoint": {
          "storage": "storage",
          "eventhub": "eventhub"
        }
      },
      "storageContainerName": {
        "eventHubCapture": "capture",
        "iotHubJsonRouting": "json"
      },
      "partitionCount": {
        "iotHub": 4,
        "eventHub": 4
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2021-02-01",
      "name": "[format('{0}storage', variables('names').prefix)]",
      "location": "[variables('location')]",
      "kind": "StorageV2",
      "sku": {
        "name": "Standard_RAGRS",
        "tier": "Standard"
      },
      "properties": {
        "minimumTlsVersion": "TLS1_2",
        "allowBlobPublicAccess": false,
        "allowSharedKeyAccess": true,
        "supportsHttpsTrafficOnly": true,
        "accessTier": "Hot"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2021-02-01",
      "name": "[format('{0}/default/{1}', format('{0}storage', variables('names').prefix), variables('names').storageContainerName.iotHubJsonRouting)]",
      "properties": {
        "publicAccess": "None"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', format('{0}storage', variables('names').prefix))]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2021-02-01",
      "name": "[format('{0}/default/{1}', format('{0}storage', variables('names').prefix), variables('names').storageContainerName.eventHubCapture)]",
      "properties": {
        "publicAccess": "None"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', format('{0}storage', variables('names').prefix))]"
      ]
    },
    {
      "type": "Microsoft.EventHub/namespaces",
      "apiVersion": "2017-04-01",
      "name": "[format('{0}eventhub', variables('names').prefix)]",
      "location": "[variables('location')]",
      "sku": {
        "name": "Standard",
        "tier": "Standard",
        "capacity": 1
      },
      "properties": {
        "isAutoInflateEnabled": false,
        "maximumThroughputUnits": 0,
        "kafkaEnabled": true
      }
    },
    {
      "type": "Microsoft.EventHub/namespaces/eventhubs",
      "apiVersion": "2017-04-01",
      "name": "[format('{0}/eventhub', format('{0}eventhub', variables('names').prefix))]",
      "properties": {
        "partitionCount": "[variables('names').partitionCount.eventHub]",
        "messageRetentionInDays": 7,
        "captureDescription": {
          "enabled": true,
          "skipEmptyArchives": false,
          "encoding": "Avro",
          "intervalInSeconds": 300,
          "destination": {
            "name": "EventHubArchive.AzureBlockBlob",
            "properties": {
              "archiveNameFormat": "{Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}",
              "blobContainer": "[substring(format('{0}/default/{1}', format('{0}storage', variables('names').prefix), variables('names').storageContainerName.eventHubCapture), add(lastIndexOf(format('{0}/default/{1}', format('{0}storage', variables('names').prefix), variables('names').storageContainerName.eventHubCapture), '/'), 1))]",
              "storageAccountResourceId": "[resourceId('Microsoft.Storage/storageAccounts', format('{0}storage', variables('names').prefix))]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', split(format('{0}/default/{1}', format('{0}storage', variables('names').prefix), variables('names').storageContainerName.eventHubCapture), '/')[0], split(format('{0}/default/{1}', format('{0}storage', variables('names').prefix), variables('names').storageContainerName.eventHubCapture), '/')[1], split(format('{0}/default/{1}', format('{0}storage', variables('names').prefix), variables('names').storageContainerName.eventHubCapture), '/')[2])]",
        "[resourceId('Microsoft.EventHub/namespaces', format('{0}eventhub', variables('names').prefix))]",
        "[resourceId('Microsoft.Storage/storageAccounts', format('{0}storage', variables('names').prefix))]"
      ]
    },
    {
      "type": "Microsoft.EventHub/namespaces/eventhubs/authorizationRules",
      "apiVersion": "2017-04-01",
      "name": "[format('{0}/iothubCanSend', format('{0}/eventhub', format('{0}eventhub', variables('names').prefix)))]",
      "properties": {
        "rights": [
          "Send"
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces/eventhubs', split(format('{0}/eventhub', format('{0}eventhub', variables('names').prefix)), '/')[0], split(format('{0}/eventhub', format('{0}eventhub', variables('names').prefix)), '/')[1])]"
      ]
    },
    {
      "type": "Microsoft.Devices/IotHubs",
      "apiVersion": "2020-08-01",
      "name": "[format('{0}iothub', variables('names').prefix)]",
      "location": "[variables('location')]",
      "sku": {
        "name": "S1",
        "capacity": 1
      },
      "properties": {
        "eventHubEndpoints": {
          "events": {
            "retentionTimeInDays": 1,
            "partitionCount": "[variables('names').partitionCount.iotHub]"
          }
        },
        "routing": {
          "endpoints": {
            "storageContainers": [
              {
                "name": "[variables('names').iothub.routingEndpoint.storage]",
                "fileNameFormat": "{iothub}/{partition}/{YYYY}/{MM}/{DD}/{HH}/{mm}.json",
                "batchFrequencyInSeconds": 60,
                "encoding": "JSON",
                "connectionString": "[format('AccountName={0};AccountKey={1};EndpointSuffix={2};DefaultEndpointsProtocol=https', format('{0}storage', variables('names').prefix), listKeys(resourceId('Microsoft.Storage/storageAccounts', format('{0}storage', variables('names').prefix)), '2021-02-01').keys[0].value, environment().suffixes.storage)]",
                "containerName": "[substring(format('{0}/default/{1}', format('{0}storage', variables('names').prefix), variables('names').storageContainerName.iotHubJsonRouting), add(lastIndexOf(format('{0}/default/{1}', format('{0}storage', variables('names').prefix), variables('names').storageContainerName.iotHubJsonRouting), '/'), 1))]"
              }
            ],
            "eventHubs": [
              {
                "name": "[variables('names').iothub.routingEndpoint.eventhub]",
                "connectionString": "[listKeys(resourceId('Microsoft.EventHub/namespaces/eventhubs/authorizationRules', split(format('{0}/iothubCanSend', format('{0}/eventhub', format('{0}eventhub', variables('names').prefix))), '/')[0], split(format('{0}/iothubCanSend', format('{0}/eventhub', format('{0}eventhub', variables('names').prefix))), '/')[1], split(format('{0}/iothubCanSend', format('{0}/eventhub', format('{0}eventhub', variables('names').prefix))), '/')[2]), '2017-04-01').primaryConnectionString]"
              }
            ]
          },
          "routes": [
            {
              "name": "routeStorage",
              "source": "DeviceMessages",
              "isEnabled": true,
              "condition": "true",
              "endpointNames": [
                "[variables('names').iothub.routingEndpoint.storage]"
              ]
            },
            {
              "name": "routeEventhub",
              "source": "DeviceMessages",
              "condition": "true",
              "endpointNames": [
                "[variables('names').iothub.routingEndpoint.eventhub]"
              ],
              "isEnabled": true
            }
          ],
          "fallbackRoute": {
            "isEnabled": true,
            "name": "$fallback",
            "source": "DeviceMessages",
            "condition": "true",
            "endpointNames": [
              "events"
            ]
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces/eventhubs/authorizationRules', split(format('{0}/iothubCanSend', format('{0}/eventhub', format('{0}eventhub', variables('names').prefix))), '/')[0], split(format('{0}/iothubCanSend', format('{0}/eventhub', format('{0}eventhub', variables('names').prefix))), '/')[1], split(format('{0}/iothubCanSend', format('{0}/eventhub', format('{0}eventhub', variables('names').prefix))), '/')[2])]",
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', split(format('{0}/default/{1}', format('{0}storage', variables('names').prefix), variables('names').storageContainerName.iotHubJsonRouting), '/')[0], split(format('{0}/default/{1}', format('{0}storage', variables('names').prefix), variables('names').storageContainerName.iotHubJsonRouting), '/')[1], split(format('{0}/default/{1}', format('{0}storage', variables('names').prefix), variables('names').storageContainerName.iotHubJsonRouting), '/')[2])]",
        "[resourceId('Microsoft.Storage/storageAccounts', format('{0}storage', variables('names').prefix))]"
      ]
    }
  ]
}